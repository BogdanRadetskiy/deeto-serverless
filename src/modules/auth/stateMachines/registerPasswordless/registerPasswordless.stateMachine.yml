name: registerPasswordless
type: EXPRESS
events:
  - http:
      path: auth/registerPasswordless
      method: POST
      action: StartSyncExecution
      cors: true
      request:
        template: lambda_proxy
      response:
        template:
          application/json: |
            {
              "body" : $input.json('$.output')
            }
definition:
  Comment: 'Register new user in Cognito and system, sends email confirmation'
  StartAt: buildInputData
  States:
    buildInputData:
      Type: Task
      Resource:
        Fn::GetAtt: [register-passwordless-build-input-data, Arn]
      Catch:
        - ErrorEquals: ['States.ALL']
          Next: CatchAllFallback
      Next: isUserExist
    isUserExist:
      Type: Task
      Resource:
        Fn::GetAtt: [is-user-exist, Arn]
      Catch:
        - ErrorEquals: ['States.ALL']
          Next: CatchAllFallback
      Next: createAuthenticatedUserWithCognito
    createAuthenticatedUserWithCognito:
      Type: Task
      Resource:
        Fn::GetAtt: [createAuthenticatedUserWithCognito, Arn]
      Catch:
        - ErrorEquals: ['States.ALL']
          Next: CatchAllFallback
      Next: generateLink
    generateLink:
      Type: Task
      Resource:
        Fn::GetAtt: [generate-link, Arn]
      Catch:
        - ErrorEquals: ['States.ALL']
          Next: CatchAllFallback
      Next: sendConfirmationEmail
    sendConfirmationEmail:
      Type: Task
      Resource:
        Fn::GetAtt: [send-confirmation-email, Arn]
      Catch:
        - ErrorEquals: ['States.ALL']
          Next: CatchAllFallback
      Next: buildOutputData
    buildOutputData:
      Type: Task
      Resource:
        Fn::GetAtt: [register-passwordless-build-output-data, Arn]
      Catch:
        - ErrorEquals: ['States.ALL']
          Next: CatchAllFallback
      End: true
    CatchAllFallback:
      Type: Task
      Resource:
        Fn::GetAtt: [catch-all-fallback, Arn]
      End: true
